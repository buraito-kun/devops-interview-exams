name: Secure CI/CD Pipeline Example

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f # pinned SHA for security
        with:
          fetch-depth: 0
      
      - name: Validate commit signatures
        run: |
          git log --show-signature -n 10
          
      - name: Secret scanning
        uses: gitleaks/gitleaks-action@v2.3.0
        with:
          config-path: .gitleaks.toml
      
      - name: SAST scanning
        uses: github/codeql-action/analyze@v2
        with:
          languages: python, javascript
          
      - name: Dependency scanning
        run: |
          python -m pip install safety
          safety check -r app/requirements.txt --json > safety-report.json
          
      - name: Infrastructure-as-Code scanning
        uses: aquasecurity/tfsec-action@master
        with:
          soft_fail: false
          
  build:
    name: Build and Test
    needs: security-scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f # pinned SHA
        
      - name: Set up Python
        uses: actions/setup-python@v4.7.0
        with:
          python-version: '3.9'
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r app/requirements.txt
          pip install pytest pytest-cov bandit
          
      - name: Run tests
        run: |
          pytest --cov=app app/tests/
          
      - name: Build Docker image with security best practices
        run: |
          docker build -t app:${{ github.sha }} \
            --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
            --build-arg VCS_REF=${{ github.sha }} \
            --build-arg VERSION=${{ github.ref_name }} \
            --no-cache \
            app/
            
      - name: Scan Docker image
        uses: aquasecurity/trivy-action@0.11.2
        with:
          image-ref: 'app:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'
          ignore-unfixed: true
          
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: app-image
          path: |
            trivy-results.sarif
            safety-report.json
            
  deploy-staging:
    name: Deploy to Staging
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: https://staging.example.com
    steps:
      - name: Checkout code
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f # pinned SHA
        
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: app-image
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::123456789012:role/github-actions-staging
          aws-region: us-west-2
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Deploy to staging
        run: |
          kubectl config use-context staging
          kubectl apply -f kubernetes/staging/deployment.yaml
          kubectl rollout status deployment/app-deployment -n staging
          
      - name: Run DAST scan
        uses: zaproxy/action-full-scan@v0.7.0
        with:
          target: 'https://staging.example.com'
          
  deploy-production:
    name: Deploy to Production
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://example.com
    steps:
      - name: Checkout code
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f # pinned SHA
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::123456789012:role/github-actions-production
          aws-region: us-west-2
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Deploy to production
        run: |
          kubectl config use-context production
          kubectl apply -f kubernetes/production/deployment.yaml
          kubectl rollout status deployment/app-deployment -n production
          
      - name: Verify deployment
        run: |
          # Run smoke tests
          curl -s https://example.com/health | grep "ok"
          
      - name: Send deployment notification
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "Deployment to production completed successfully: ${{ github.repository }}@${{ github.sha }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
